networks:
  app-network:

volumes:
  config1_data:
  config2_data:
  config3_data:
  shard1a_data:
  shard1b_data:
  shard1c_data:
  shard2a_data:
  shard2b_data:
  shard2c_data:
  shard3a_data:
  shard3b_data:
  shard3c_data:

services:

  config1:
    image: mongo:6.0
    container_name: config1
    command: ["mongod", "--configsvr", "--replSet", "configReplSet", "--port", "27017", "--bind_ip_all"]
    volumes: [config1_data:/data/db]
    networks: [app-network]

  config2:
    image: mongo:6.0
    container_name: config2
    command: ["mongod", "--configsvr", "--replSet", "configReplSet", "--port", "27017", "--bind_ip_all"]
    volumes: [config2_data:/data/db]
    networks: [app-network]

  config3:
    image: mongo:6.0
    container_name: config3
    command: ["mongod", "--configsvr", "--replSet", "configReplSet", "--port", "27017", "--bind_ip_all"]
    volumes: [config3_data:/data/db]
    networks: [app-network]

  shard1a:
    image: mongo:6.0
    container_name: shard1a
    command: ["mongod", "--shardsvr", "--replSet", "shard1ReplSet", "--port", "27018", "--bind_ip_all"]
    volumes: [shard1a_data:/data/db]
    networks: [app-network]

  shard1b:
    image: mongo:6.0
    container_name: shard1b
    command: ["mongod", "--shardsvr", "--replSet", "shard1ReplSet", "--port", "27018", "--bind_ip_all"]
    volumes: [shard1b_data:/data/db]
    networks: [app-network]

  shard1c:
    image: mongo:6.0
    container_name: shard1c
    command: ["mongod", "--shardsvr", "--replSet", "shard1ReplSet", "--port", "27018", "--bind_ip_all"]
    volumes: [shard1c_data:/data/db]
    networks: [app-network]

  shard2a:
    image: mongo:6.0
    container_name: shard2a
    command: ["mongod", "--shardsvr", "--replSet", "shard2ReplSet", "--port", "27019", "--bind_ip_all"]
    volumes: [shard2a_data:/data/db]
    networks: [app-network]

  shard2b:
    image: mongo:6.0
    container_name: shard2b
    command: ["mongod", "--shardsvr", "--replSet", "shard2ReplSet", "--port", "27019", "--bind_ip_all"]
    volumes: [shard2b_data:/data/db]
    networks: [app-network]

  shard2c:
    image: mongo:6.0
    container_name: shard2c
    command: ["mongod", "--shardsvr", "--replSet", "shard2ReplSet", "--port", "27019", "--bind_ip_all"]
    volumes: [shard2c_data:/data/db]
    networks: [app-network]

  shard3a:
    image: mongo:6.0
    container_name: shard3a
    command: ["mongod", "--shardsvr", "--replSet", "shard3ReplSet", "--port", "27020", "--bind_ip_all"]
    volumes: [shard3a_data:/data/db]
    networks: [app-network]

  shard3b:
    image: mongo:6.0
    container_name: shard3b
    command: ["mongod", "--shardsvr", "--replSet", "shard3ReplSet", "--port", "27020", "--bind_ip_all"]
    volumes: [shard3b_data:/data/db]
    networks: [app-network]

  shard3c:
    image: mongo:6.0
    container_name: shard3c
    command: ["mongod", "--shardsvr", "--replSet", "shard3ReplSet", "--port", "27020", "--bind_ip_all"]
    volumes: [shard3c_data:/data/db]
    networks: [app-network]

  mongos:
    image: mongo:6.0
    container_name: mongos
    depends_on: [config1]
    ports:
      - "27021:27017"
    command: ["mongos", "--configdb", "configReplSet/config1:27017,config2:27017,config3:27017", "--port", "27017", "--bind_ip_all"]
    networks: [app-network]

  mongo-setup:
    image: mongo:6.0
    container_name: mongo-setup
    depends_on:
      - mongos
      - config1
      - config2
      - config3
      - shard1a
      - shard1b
      - shard1c
      - shard2a
      - shard2b
      - shard2c
      - shard3a
      - shard3b
      - shard3c
    volumes:
      - ./init-cluster.sh:/init-cluster.sh
    command: ["bash", "/init-cluster.sh"]
    networks: [app-network]

  python-api:
    build: ./pythonApiYahooFinance
    container_name: python-api
    ports: ["5000:5000"]
    networks: [app-network]
    restart: unless-stopped
    
  # --- Java Application Service ---
  # java-app:
  #   build: .
  #   container_name: java-app
  #   depends_on:
  #     mongo-setup:
  #       condition: service_completed_successfully
  #     mongos:
  #       condition: service_started
  #     python-api:
  #       condition: service_started
  #   ports:
  #     - "8000:8000"
  #   networks:
  #     - app-network
  #   environment:
  #     MONGO_URI: "mongodb://mongos:27017"
  #     MONGO_DB_NAME: "gestionBourse"
  #     PYTHON_API_URL: "http://python-api:5000"
  #     ENABLE_REDIS_CACHE: "true"
  #   restart: on-failure
  #   command: >
  #     bash -c '
  #     if [ "$ENABLE_REDIS_CACHE" = "true" ]; then
  #       echo "INFO: Redis cache ENABLED via environment variable."
  #       exec java -jar ./app.jar --enableRedisCache
  #     else
  #       echo "INFO: Redis cache DISABLED via environment variable."
  #       exec java -jar ./app.jar
  #     fi
  #     '
